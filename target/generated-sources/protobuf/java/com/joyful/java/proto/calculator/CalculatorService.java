// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator/calculator.proto

package com.joyful.java.proto.calculator;

/**
 * Protobuf service {@code calculator.CalculatorService}
 */
public  abstract class CalculatorService
    implements com.google.protobuf.Service {
  protected CalculatorService() {}

  public interface Interface {
    /**
     * <code>rpc Sum(.calculator.SumRequest) returns (.calculator.SumResponse);</code>
     */
    public abstract void sum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SumRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SumResponse> done);

    /**
     * <code>rpc PrimeNumberDecomposition(.calculator.PrimeNumberDecomositionRequest) returns (stream .calculator.PrimeNumberDecompositionResponse);</code>
     */
    public abstract void primeNumberDecomposition(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse> done);

    /**
     * <code>rpc ComputeAverage(stream .calculator.ComputeAverageRequest) returns (.calculator.ComputeAverageResponse);</code>
     */
    public abstract void computeAverage(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.ComputeAverageRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.ComputeAverageResponse> done);

    /**
     * <code>rpc FindMaximum(stream .calculator.FindMaximumRequest) returns (stream .calculator.FindMaximumResponse);</code>
     */
    public abstract void findMaximum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.FindMaximumRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.FindMaximumResponse> done);

    /**
     * <pre>
     *this RPC will throw an exception if the sent number is negative
     * </pre>
     *
     * <code>rpc SqareRoot(.calculator.SquareRootRequest) returns (.calculator.SquareRootResponse);</code>
     */
    public abstract void sqareRoot(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SquareRootRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SquareRootResponse> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new CalculatorService() {
      @java.lang.Override
      public  void sum(
          com.google.protobuf.RpcController controller,
          com.joyful.java.proto.calculator.SumRequest request,
          com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SumResponse> done) {
        impl.sum(controller, request, done);
      }

      @java.lang.Override
      public  void primeNumberDecomposition(
          com.google.protobuf.RpcController controller,
          com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest request,
          com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse> done) {
        impl.primeNumberDecomposition(controller, request, done);
      }

      @java.lang.Override
      public  void computeAverage(
          com.google.protobuf.RpcController controller,
          com.joyful.java.proto.calculator.ComputeAverageRequest request,
          com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.ComputeAverageResponse> done) {
        impl.computeAverage(controller, request, done);
      }

      @java.lang.Override
      public  void findMaximum(
          com.google.protobuf.RpcController controller,
          com.joyful.java.proto.calculator.FindMaximumRequest request,
          com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.FindMaximumResponse> done) {
        impl.findMaximum(controller, request, done);
      }

      @java.lang.Override
      public  void sqareRoot(
          com.google.protobuf.RpcController controller,
          com.joyful.java.proto.calculator.SquareRootRequest request,
          com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SquareRootResponse> done) {
        impl.sqareRoot(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.sum(controller, (com.joyful.java.proto.calculator.SumRequest)request);
          case 1:
            return impl.primeNumberDecomposition(controller, (com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest)request);
          case 2:
            return impl.computeAverage(controller, (com.joyful.java.proto.calculator.ComputeAverageRequest)request);
          case 3:
            return impl.findMaximum(controller, (com.joyful.java.proto.calculator.FindMaximumRequest)request);
          case 4:
            return impl.sqareRoot(controller, (com.joyful.java.proto.calculator.SquareRootRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.joyful.java.proto.calculator.SumRequest.getDefaultInstance();
          case 1:
            return com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest.getDefaultInstance();
          case 2:
            return com.joyful.java.proto.calculator.ComputeAverageRequest.getDefaultInstance();
          case 3:
            return com.joyful.java.proto.calculator.FindMaximumRequest.getDefaultInstance();
          case 4:
            return com.joyful.java.proto.calculator.SquareRootRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.joyful.java.proto.calculator.SumResponse.getDefaultInstance();
          case 1:
            return com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse.getDefaultInstance();
          case 2:
            return com.joyful.java.proto.calculator.ComputeAverageResponse.getDefaultInstance();
          case 3:
            return com.joyful.java.proto.calculator.FindMaximumResponse.getDefaultInstance();
          case 4:
            return com.joyful.java.proto.calculator.SquareRootResponse.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc Sum(.calculator.SumRequest) returns (.calculator.SumResponse);</code>
   */
  public abstract void sum(
      com.google.protobuf.RpcController controller,
      com.joyful.java.proto.calculator.SumRequest request,
      com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SumResponse> done);

  /**
   * <code>rpc PrimeNumberDecomposition(.calculator.PrimeNumberDecomositionRequest) returns (stream .calculator.PrimeNumberDecompositionResponse);</code>
   */
  public abstract void primeNumberDecomposition(
      com.google.protobuf.RpcController controller,
      com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest request,
      com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse> done);

  /**
   * <code>rpc ComputeAverage(stream .calculator.ComputeAverageRequest) returns (.calculator.ComputeAverageResponse);</code>
   */
  public abstract void computeAverage(
      com.google.protobuf.RpcController controller,
      com.joyful.java.proto.calculator.ComputeAverageRequest request,
      com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.ComputeAverageResponse> done);

  /**
   * <code>rpc FindMaximum(stream .calculator.FindMaximumRequest) returns (stream .calculator.FindMaximumResponse);</code>
   */
  public abstract void findMaximum(
      com.google.protobuf.RpcController controller,
      com.joyful.java.proto.calculator.FindMaximumRequest request,
      com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.FindMaximumResponse> done);

  /**
   * <pre>
   *this RPC will throw an exception if the sent number is negative
   * </pre>
   *
   * <code>rpc SqareRoot(.calculator.SquareRootRequest) returns (.calculator.SquareRootResponse);</code>
   */
  public abstract void sqareRoot(
      com.google.protobuf.RpcController controller,
      com.joyful.java.proto.calculator.SquareRootRequest request,
      com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SquareRootResponse> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.joyful.java.proto.calculator.Calculator.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.sum(controller, (com.joyful.java.proto.calculator.SumRequest)request,
          com.google.protobuf.RpcUtil.<com.joyful.java.proto.calculator.SumResponse>specializeCallback(
            done));
        return;
      case 1:
        this.primeNumberDecomposition(controller, (com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest)request,
          com.google.protobuf.RpcUtil.<com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse>specializeCallback(
            done));
        return;
      case 2:
        this.computeAverage(controller, (com.joyful.java.proto.calculator.ComputeAverageRequest)request,
          com.google.protobuf.RpcUtil.<com.joyful.java.proto.calculator.ComputeAverageResponse>specializeCallback(
            done));
        return;
      case 3:
        this.findMaximum(controller, (com.joyful.java.proto.calculator.FindMaximumRequest)request,
          com.google.protobuf.RpcUtil.<com.joyful.java.proto.calculator.FindMaximumResponse>specializeCallback(
            done));
        return;
      case 4:
        this.sqareRoot(controller, (com.joyful.java.proto.calculator.SquareRootRequest)request,
          com.google.protobuf.RpcUtil.<com.joyful.java.proto.calculator.SquareRootResponse>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.joyful.java.proto.calculator.SumRequest.getDefaultInstance();
      case 1:
        return com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest.getDefaultInstance();
      case 2:
        return com.joyful.java.proto.calculator.ComputeAverageRequest.getDefaultInstance();
      case 3:
        return com.joyful.java.proto.calculator.FindMaximumRequest.getDefaultInstance();
      case 4:
        return com.joyful.java.proto.calculator.SquareRootRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.joyful.java.proto.calculator.SumResponse.getDefaultInstance();
      case 1:
        return com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse.getDefaultInstance();
      case 2:
        return com.joyful.java.proto.calculator.ComputeAverageResponse.getDefaultInstance();
      case 3:
        return com.joyful.java.proto.calculator.FindMaximumResponse.getDefaultInstance();
      case 4:
        return com.joyful.java.proto.calculator.SquareRootResponse.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.joyful.java.proto.calculator.CalculatorService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void sum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SumRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SumResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.joyful.java.proto.calculator.SumResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.joyful.java.proto.calculator.SumResponse.class,
          com.joyful.java.proto.calculator.SumResponse.getDefaultInstance()));
    }

    public  void primeNumberDecomposition(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse.class,
          com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse.getDefaultInstance()));
    }

    public  void computeAverage(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.ComputeAverageRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.ComputeAverageResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.joyful.java.proto.calculator.ComputeAverageResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.joyful.java.proto.calculator.ComputeAverageResponse.class,
          com.joyful.java.proto.calculator.ComputeAverageResponse.getDefaultInstance()));
    }

    public  void findMaximum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.FindMaximumRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.FindMaximumResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.joyful.java.proto.calculator.FindMaximumResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.joyful.java.proto.calculator.FindMaximumResponse.class,
          com.joyful.java.proto.calculator.FindMaximumResponse.getDefaultInstance()));
    }

    public  void sqareRoot(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SquareRootRequest request,
        com.google.protobuf.RpcCallback<com.joyful.java.proto.calculator.SquareRootResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.joyful.java.proto.calculator.SquareRootResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.joyful.java.proto.calculator.SquareRootResponse.class,
          com.joyful.java.proto.calculator.SquareRootResponse.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.joyful.java.proto.calculator.SumResponse sum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SumRequest request)
        throws com.google.protobuf.ServiceException;

    public com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse primeNumberDecomposition(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest request)
        throws com.google.protobuf.ServiceException;

    public com.joyful.java.proto.calculator.ComputeAverageResponse computeAverage(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.ComputeAverageRequest request)
        throws com.google.protobuf.ServiceException;

    public com.joyful.java.proto.calculator.FindMaximumResponse findMaximum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.FindMaximumRequest request)
        throws com.google.protobuf.ServiceException;

    public com.joyful.java.proto.calculator.SquareRootResponse sqareRoot(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SquareRootRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.joyful.java.proto.calculator.SumResponse sum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SumRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.joyful.java.proto.calculator.SumResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.joyful.java.proto.calculator.SumResponse.getDefaultInstance());
    }


    public com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse primeNumberDecomposition(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.PrimeNumberDecomositionRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.joyful.java.proto.calculator.PrimeNumberDecompositionResponse.getDefaultInstance());
    }


    public com.joyful.java.proto.calculator.ComputeAverageResponse computeAverage(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.ComputeAverageRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.joyful.java.proto.calculator.ComputeAverageResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.joyful.java.proto.calculator.ComputeAverageResponse.getDefaultInstance());
    }


    public com.joyful.java.proto.calculator.FindMaximumResponse findMaximum(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.FindMaximumRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.joyful.java.proto.calculator.FindMaximumResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.joyful.java.proto.calculator.FindMaximumResponse.getDefaultInstance());
    }


    public com.joyful.java.proto.calculator.SquareRootResponse sqareRoot(
        com.google.protobuf.RpcController controller,
        com.joyful.java.proto.calculator.SquareRootRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.joyful.java.proto.calculator.SquareRootResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.joyful.java.proto.calculator.SquareRootResponse.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:calculator.CalculatorService)
}

