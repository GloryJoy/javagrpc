// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greet/greet.proto

package com.proto.greet;

/**
 * Protobuf service {@code greet.GreetService}
 */
public  abstract class GreetService
    implements com.google.protobuf.Service {
  protected GreetService() {}

  public interface Interface {
    /**
     * <code>rpc Greet(.greet.GreetRequest) returns (.greet.GreetResponse);</code>
     */
    public abstract void greet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetResponse> done);

    /**
     * <code>rpc GreetManyTimes(.greet.GreetManytimesRequest) returns (stream .greet.GreetManytimesResponse);</code>
     */
    public abstract void greetManyTimes(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetManytimesRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetManytimesResponse> done);

    /**
     * <code>rpc LongGreet(stream .greet.LongGreetRequest) returns (.greet.LongGreetResponse);</code>
     */
    public abstract void longGreet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.LongGreetRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.LongGreetResponse> done);

    /**
     * <code>rpc GreetEveryone(stream .greet.GreetEveryoneRequest) returns (stream .greet.GreetEveryoneResponse);</code>
     */
    public abstract void greetEveryone(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetEveryoneRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetEveryoneResponse> done);

    /**
     * <code>rpc GreetWithDeathline(.greet.GreetWithDeathlineRequest) returns (.greet.GreetWithDeathlineResponse);</code>
     */
    public abstract void greetWithDeathline(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetWithDeathlineRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetWithDeathlineResponse> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new GreetService() {
      @java.lang.Override
      public  void greet(
          com.google.protobuf.RpcController controller,
          com.proto.greet.GreetRequest request,
          com.google.protobuf.RpcCallback<com.proto.greet.GreetResponse> done) {
        impl.greet(controller, request, done);
      }

      @java.lang.Override
      public  void greetManyTimes(
          com.google.protobuf.RpcController controller,
          com.proto.greet.GreetManytimesRequest request,
          com.google.protobuf.RpcCallback<com.proto.greet.GreetManytimesResponse> done) {
        impl.greetManyTimes(controller, request, done);
      }

      @java.lang.Override
      public  void longGreet(
          com.google.protobuf.RpcController controller,
          com.proto.greet.LongGreetRequest request,
          com.google.protobuf.RpcCallback<com.proto.greet.LongGreetResponse> done) {
        impl.longGreet(controller, request, done);
      }

      @java.lang.Override
      public  void greetEveryone(
          com.google.protobuf.RpcController controller,
          com.proto.greet.GreetEveryoneRequest request,
          com.google.protobuf.RpcCallback<com.proto.greet.GreetEveryoneResponse> done) {
        impl.greetEveryone(controller, request, done);
      }

      @java.lang.Override
      public  void greetWithDeathline(
          com.google.protobuf.RpcController controller,
          com.proto.greet.GreetWithDeathlineRequest request,
          com.google.protobuf.RpcCallback<com.proto.greet.GreetWithDeathlineResponse> done) {
        impl.greetWithDeathline(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.greet(controller, (com.proto.greet.GreetRequest)request);
          case 1:
            return impl.greetManyTimes(controller, (com.proto.greet.GreetManytimesRequest)request);
          case 2:
            return impl.longGreet(controller, (com.proto.greet.LongGreetRequest)request);
          case 3:
            return impl.greetEveryone(controller, (com.proto.greet.GreetEveryoneRequest)request);
          case 4:
            return impl.greetWithDeathline(controller, (com.proto.greet.GreetWithDeathlineRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.proto.greet.GreetRequest.getDefaultInstance();
          case 1:
            return com.proto.greet.GreetManytimesRequest.getDefaultInstance();
          case 2:
            return com.proto.greet.LongGreetRequest.getDefaultInstance();
          case 3:
            return com.proto.greet.GreetEveryoneRequest.getDefaultInstance();
          case 4:
            return com.proto.greet.GreetWithDeathlineRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.proto.greet.GreetResponse.getDefaultInstance();
          case 1:
            return com.proto.greet.GreetManytimesResponse.getDefaultInstance();
          case 2:
            return com.proto.greet.LongGreetResponse.getDefaultInstance();
          case 3:
            return com.proto.greet.GreetEveryoneResponse.getDefaultInstance();
          case 4:
            return com.proto.greet.GreetWithDeathlineResponse.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc Greet(.greet.GreetRequest) returns (.greet.GreetResponse);</code>
   */
  public abstract void greet(
      com.google.protobuf.RpcController controller,
      com.proto.greet.GreetRequest request,
      com.google.protobuf.RpcCallback<com.proto.greet.GreetResponse> done);

  /**
   * <code>rpc GreetManyTimes(.greet.GreetManytimesRequest) returns (stream .greet.GreetManytimesResponse);</code>
   */
  public abstract void greetManyTimes(
      com.google.protobuf.RpcController controller,
      com.proto.greet.GreetManytimesRequest request,
      com.google.protobuf.RpcCallback<com.proto.greet.GreetManytimesResponse> done);

  /**
   * <code>rpc LongGreet(stream .greet.LongGreetRequest) returns (.greet.LongGreetResponse);</code>
   */
  public abstract void longGreet(
      com.google.protobuf.RpcController controller,
      com.proto.greet.LongGreetRequest request,
      com.google.protobuf.RpcCallback<com.proto.greet.LongGreetResponse> done);

  /**
   * <code>rpc GreetEveryone(stream .greet.GreetEveryoneRequest) returns (stream .greet.GreetEveryoneResponse);</code>
   */
  public abstract void greetEveryone(
      com.google.protobuf.RpcController controller,
      com.proto.greet.GreetEveryoneRequest request,
      com.google.protobuf.RpcCallback<com.proto.greet.GreetEveryoneResponse> done);

  /**
   * <code>rpc GreetWithDeathline(.greet.GreetWithDeathlineRequest) returns (.greet.GreetWithDeathlineResponse);</code>
   */
  public abstract void greetWithDeathline(
      com.google.protobuf.RpcController controller,
      com.proto.greet.GreetWithDeathlineRequest request,
      com.google.protobuf.RpcCallback<com.proto.greet.GreetWithDeathlineResponse> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.proto.greet.Greet.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.greet(controller, (com.proto.greet.GreetRequest)request,
          com.google.protobuf.RpcUtil.<com.proto.greet.GreetResponse>specializeCallback(
            done));
        return;
      case 1:
        this.greetManyTimes(controller, (com.proto.greet.GreetManytimesRequest)request,
          com.google.protobuf.RpcUtil.<com.proto.greet.GreetManytimesResponse>specializeCallback(
            done));
        return;
      case 2:
        this.longGreet(controller, (com.proto.greet.LongGreetRequest)request,
          com.google.protobuf.RpcUtil.<com.proto.greet.LongGreetResponse>specializeCallback(
            done));
        return;
      case 3:
        this.greetEveryone(controller, (com.proto.greet.GreetEveryoneRequest)request,
          com.google.protobuf.RpcUtil.<com.proto.greet.GreetEveryoneResponse>specializeCallback(
            done));
        return;
      case 4:
        this.greetWithDeathline(controller, (com.proto.greet.GreetWithDeathlineRequest)request,
          com.google.protobuf.RpcUtil.<com.proto.greet.GreetWithDeathlineResponse>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.proto.greet.GreetRequest.getDefaultInstance();
      case 1:
        return com.proto.greet.GreetManytimesRequest.getDefaultInstance();
      case 2:
        return com.proto.greet.LongGreetRequest.getDefaultInstance();
      case 3:
        return com.proto.greet.GreetEveryoneRequest.getDefaultInstance();
      case 4:
        return com.proto.greet.GreetWithDeathlineRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.proto.greet.GreetResponse.getDefaultInstance();
      case 1:
        return com.proto.greet.GreetManytimesResponse.getDefaultInstance();
      case 2:
        return com.proto.greet.LongGreetResponse.getDefaultInstance();
      case 3:
        return com.proto.greet.GreetEveryoneResponse.getDefaultInstance();
      case 4:
        return com.proto.greet.GreetWithDeathlineResponse.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.proto.greet.GreetService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void greet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.proto.greet.GreetResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.proto.greet.GreetResponse.class,
          com.proto.greet.GreetResponse.getDefaultInstance()));
    }

    public  void greetManyTimes(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetManytimesRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetManytimesResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.proto.greet.GreetManytimesResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.proto.greet.GreetManytimesResponse.class,
          com.proto.greet.GreetManytimesResponse.getDefaultInstance()));
    }

    public  void longGreet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.LongGreetRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.LongGreetResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.proto.greet.LongGreetResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.proto.greet.LongGreetResponse.class,
          com.proto.greet.LongGreetResponse.getDefaultInstance()));
    }

    public  void greetEveryone(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetEveryoneRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetEveryoneResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.proto.greet.GreetEveryoneResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.proto.greet.GreetEveryoneResponse.class,
          com.proto.greet.GreetEveryoneResponse.getDefaultInstance()));
    }

    public  void greetWithDeathline(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetWithDeathlineRequest request,
        com.google.protobuf.RpcCallback<com.proto.greet.GreetWithDeathlineResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.proto.greet.GreetWithDeathlineResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.proto.greet.GreetWithDeathlineResponse.class,
          com.proto.greet.GreetWithDeathlineResponse.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.proto.greet.GreetResponse greet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetRequest request)
        throws com.google.protobuf.ServiceException;

    public com.proto.greet.GreetManytimesResponse greetManyTimes(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetManytimesRequest request)
        throws com.google.protobuf.ServiceException;

    public com.proto.greet.LongGreetResponse longGreet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.LongGreetRequest request)
        throws com.google.protobuf.ServiceException;

    public com.proto.greet.GreetEveryoneResponse greetEveryone(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetEveryoneRequest request)
        throws com.google.protobuf.ServiceException;

    public com.proto.greet.GreetWithDeathlineResponse greetWithDeathline(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetWithDeathlineRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.proto.greet.GreetResponse greet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.proto.greet.GreetResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.proto.greet.GreetResponse.getDefaultInstance());
    }


    public com.proto.greet.GreetManytimesResponse greetManyTimes(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetManytimesRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.proto.greet.GreetManytimesResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.proto.greet.GreetManytimesResponse.getDefaultInstance());
    }


    public com.proto.greet.LongGreetResponse longGreet(
        com.google.protobuf.RpcController controller,
        com.proto.greet.LongGreetRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.proto.greet.LongGreetResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.proto.greet.LongGreetResponse.getDefaultInstance());
    }


    public com.proto.greet.GreetEveryoneResponse greetEveryone(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetEveryoneRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.proto.greet.GreetEveryoneResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.proto.greet.GreetEveryoneResponse.getDefaultInstance());
    }


    public com.proto.greet.GreetWithDeathlineResponse greetWithDeathline(
        com.google.protobuf.RpcController controller,
        com.proto.greet.GreetWithDeathlineRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.proto.greet.GreetWithDeathlineResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.proto.greet.GreetWithDeathlineResponse.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:greet.GreetService)
}

